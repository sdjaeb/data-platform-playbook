# Description: Conceptual docker-compose.yml for Intermediate Track.
# Source: Building Enterprise-Ready Data Platforms v2.4, Section 3.2.
#
# This snippet expands on the Starter components by adding Kafka and Spark.
# Note: This is a conceptual snippet. The full docker-compose.yml would contain
# a comprehensive definition of all services used in the Intermediate Track,
# including postgres and minio services that are still present from Starter.
# Intermediate Track: Add Kafka & Spark for streaming
version: '3.8'
services:
  # ... (postgres, minio services - still present for reference/metadata) ...
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: intermediate-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: intermediate-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # Expose Kafka broker port for external access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  fastapi_ingestor:
    build: ./fastapi_app
    container_name: intermediate-fastapi-ingestor
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      KAFKA_BROKER: kafka:29092 # Important: use Kafka service name for internal Docker communication
      KAFKA_TOPIC: raw_financial_insurance_data
    volumes:
      - ./src/fastapi_app_intermediate:/app/app # Updated ingestor to publish to Kafka
    depends_on:
      kafka:
        condition: service_healthy # Ensure Kafka is healthy before FastAPI tries to connect
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: intermediate-spark-master
    restart: unless-stopped
    command: /opt/bitnami/spark/bin/spark-shell # Or spark-class org.apache.spark.deploy.master.Master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_EVENT_LOG_ENABLED: "true"
      SPARK_EVENT_LOG_DIR: "/opt/bitnami/spark/events"
      SPARK_SUBMIT_ARGS: --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,io.delta:delta-core_2.12:2.4.0 --conf "spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension" --conf "spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog"
    ports:
      - "8080:8080" # Spark Master UI
      - "7077:7077" # Spark Master internal communication
    volumes:
      - ./data/spark-events:/opt/bitnami/spark/events # For Spark History Server
      - ./pyspark_jobs:/opt/bitnami/spark/data/pyspark_jobs # Mount PySpark jobs
  spark-worker-1:
    image: bitnami/spark:3.5.0
    container_name: intermediate-spark-worker-1
    restart: unless-stopped
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1G
      SPARK_EVENT_LOG_ENABLED: "true"
      SPARK_EVENT_LOG_DIR: "/opt/bitnami/spark/events"
      SPARK_SUBMIT_ARGS: --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,io.delta:delta-core_2.12:2.4.0 --conf "spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension" --conf "spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog"
    volumes:
      - ./data/spark-events:/opt/bitnami/spark/events
    depends_on:
      spark-master:
        condition: service_healthy
      kafka:
        condition: service_healthy # Dependency on Kafka
      minio:
        condition: service_healthy # Dependency on MinIO