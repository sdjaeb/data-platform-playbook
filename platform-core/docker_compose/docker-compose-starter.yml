# Description: Simplified docker-compose.yml for Starter Track.
# Source: Building Enterprise-Ready Data Platforms v2.4, Section 3.1.
#
# This snippet focuses on a minimal setup with FastAPI, PostgreSQL, and MinIO.
# The full docker-compose.yml is detailed in Appendix E of the source document.
# Simplified docker-compose.yml for Starter Track
version: '3.8'
services:
  postgres:
    image: postgres:15
    container_name: starter-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: starter_db
    volumes:
      - ./data/starter-postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Exposed for direct access and FastAPI connectivity
  minio:
    image: minio/minio:latest
    container_name: starter-minio
    restart: unless-stopped
    ports:
      - "9000:9000" # MinIO API port
      - "9901:9001" # MinIO Console UI port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./data/starter-minio:/data # Persistent volume for MinIO data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  fastapi_ingestor:
    build: ./fastapi_app # Path to your FastAPI Dockerfile
    container_name: starter-fastapi-ingestor
    restart: unless-stopped
    ports:
      - "8000:8000" # Expose FastAPI API port
    environment:
      # These variables would direct FastAPI to store data directly into Postgres or MinIO
      DATABASE_TYPE: "postgres" # Or "minio" for direct file writes
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      # Mount application code for development and hot-reloading
      - ./src/fastapi_app_starter:/app/app # Simplified ingestor for direct DB/MinIO writes
    depends_on:
      postgres:
        condition: service_healthy # Ensure Postgres is ready
      minio:
        condition: service_healthy # Ensure MinIO is ready