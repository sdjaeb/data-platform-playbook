// This block defines how Alloy will receive telemetry data from applications.
// It listens for OTLP data over both gRPC (port 4317) and HTTP (port 4318).
otelcol.receiver.otlp "default" {
  grpc {}
  http {}

  // Define where the received data should go next.
  output {
    metrics = [otelcol.processor.batch.metrics.input]
    logs    = [otelcol.exporter.loki.default.input]
    traces  = [otelcol.processor.batch.traces.input]
  }
}

// Batch processors improve efficiency by grouping telemetry data before sending.
otelcol.processor.batch "metrics" {
  output {
    metrics = [otelcol.exporter.prometheus.default.input]
  }
}

otelcol.processor.batch "traces" {
  output {
    traces = [otelcol.exporter.otlp.jaeger.input]
  }
}

// This block defines where Alloy will send the processed telemetry data.

// Export metrics to Prometheus using remote_write.
otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// Export logs to Loki.
otelcol.exporter.loki "default" {
    forward_to = [loki.write.default.receiver]
}

loki.write "default" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
    }
}

// Export traces to Jaeger.
otelcol.exporter.otlp "jaeger" {
  client {
    endpoint = "jaeger:4317"

    // CRITICAL FIX: Tell the client NOT to use TLS.
    // This makes it send plain-text gRPC, which is what Jaeger expects, resolving the "bogus greeting" error.
    tls {
      insecure = true
    }
  }
}